source('~/run_analysis.r')
View(masterDataset)
gsub("\\()","",names(masterDataset),)
View(masterDataset)
masterDataset <- gsub("\\()","",names(masterDataset),)
source('~/run_analysis.r')
colnames(masterDataset) <- gsub("\\()","",names(masterDataset),)
View(masterDataset)
source('~/run_analysis.r')
help(unzip)
source('~/GettingDataRepo/run_analysis.r')
q1 <- read.table("./data/getdata-data-ss06hid.csv", sep="," header = TRUE)
q1 <- read.csv("./data/getdata-data-ss06hid.csv")
header(q1)
head(q1)
logical <- ifelse(q1$acr = 3 + q1$ags = 6,TRUE,FALSE)
logical <- ifelse(q1$acr == 3 + q1$ags == 6,TRUE,FALSE)
logical <- ifelse(q1$acr == 3,TRUE,FALSE)
logical <- ifelse(q1$acr == 3 & q1$ags == 6,TRUE,FALSE)
logical
q1$logical <- ifelse(q1$acr == 3 & q1$ags == 6,TRUE,FALSE)
q1$logical = ifelse(q1$acr == 3 & q1$ags == 6,TRUE,FALSE)
q1$logical = ifelse(q1$acr == 3 & ,TRUE,FALSE)
q1$logical = ifelse(q1$acr == 3 ,TRUE,FALSE)
logical <- which(with(q1, acr ==3, & ags == 6))
logical <- which(with(q1, acr ==3 & ags == 6))
View(`q1`)
logical <- which(with(q1, ACR ==3 & AGS == 6))
logical
logical1 = ifelse(q1$ACR == 3 & q1$AGS == 6,TRUE,FALSE)
logical1
install.packages("jpeg")
library(jpeg)
img <- readJPEG("./data/getdata-jeff.jpg", native = FALSE)
head(img)
img <- readJPEG("./data/getdata-jeff.jpg", native = TRUE)
head(img)
quantile(img, probs=c(0.3,0.8))
fileURl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file (fileURl, destfile = "./data/q2.csv", method=curl)
download.file (fileURl, destfile = "./data/q2.csv", method= "curl")
list.files("./data")
q2 <- read.csv("./data/q2.csv")
head(q2)
q2
q2 <- read.csv("./data/q2.csv", header= TRUE)
q2
q2 <- read.csv("./data/q2.csv", header= FALSE)
q2
q2 <- read.csv("./data/q2.csv", header= TRUE)
q2
head(q2)
q2pt2 <- read.csv("./data/q1-1.csv", header = TRUE)
q2pt2 <- read.csv("./data/q2-1.csv", header = TRUE)
head(q1pt2)
head(q2pt2)
View(`q2pt2`)
View(`q2`)
View(`q2`)
View(`q2pt2`)
View(`q2`)
View(`q2pt2`)
View(`q2`)
colname(q2$X) = "CountryCode"
colnames(q2$X) = "CountryCode"
colnames(q2)[1] = "CountryCode"
View(`q2`)
colnames(q2)[5] = "GDP"
View(`q2pt2`)
View(`q2`)
tidyq2 <- q2[c(1,5)]
tidyq2
colnames(q2)[4] = "Country"
View(`q2`)
tidyq2 <- q2[c(1,4,5)]
View(tidyq2)
tidierq2 <- tidyq2(5:219)
tidierq2 <- tidyq2(5:219,)
View(tidyq2)
tidierq2 <- tidyq2[5:219,]
tidierq2
tidierq2 <- tidyq2[5:194,]
tidierq2
merged = merge(tidierq2,q2pt2, by.x="CountryCode", by.y="CountryCode", all=TRUE)
head(merged)
View(merged)
View(`q2`)
sort(merged$GDP, decreasing = TRUE)
View(`q2`)
View(`q2`)
tidyq2 <- q2[c(1,2,4,5)]
View(tidyq2)
tidierq2 <- tidyq2[5:194,]
View(tidierq2)
View(tidyq2)
View(tidyq2)
colnames(q2)[2] = "Rank"
tidyq2 <- q2[c(1,2,4,5)]
View(tidyq2)
tidierq2 <- tidyq2[5:194,]
View(tidierq2)
merged = merge(tidierq2,q2pt2, by.x="CountryCode", by.y="CountryCode", all=TRUE)
View(merged)
sortmer <- sort(merge$rank, decreasing = TRUE)
View(merged)
sort(merge$rank, decreasing = TRUE)
sort(merged$rank, decreasing = TRUE)
sort(merged$Rank, decreasing = TRUE)
sortmer <- sort(merged$Rank, decreasing = TRUE)
View(merged)
merged[,2] <- as.numeric(merged[,2])
sort(merged$Rank, decreasing = TRUE)
merged[,4] <- as.numeric(merged[,4])
library(plyr)
arrange(merged,desc(Rank))
sort <- arrange(merged,desc(Rank))
View(sort)
head(sort n=13)
head(sort, n=13)
head(sort, n=13)
head[13,]
sort[13,]
head(merged)
View(tidierq2)
View(tidierq2)
View(`q2pt2`)
merged = merge(tidierq2,q2pt2, by.x="CountryCode", by.y="CountryCode", all=TRUE)
View(merged)
head(merged)
merged[,2] <- as.numeric(merged[,2])
sort <- arrange(merged,desc(Rank))
View(sort)
sort <- merged[with(merged, order(-Rank))]
sort <- merged[with(merged, order(-Rank)),]
View(sort)
sort <- merged[order(merged$Rank),]
View(sort)
View(merged)
View(merged)
write.csv(merged, "./data/quiz3.csv")
library(jpeg)
img <- readJPEG("./data/getdata-jeff.jpg", native = TRUE)
head(img)
quantile(img, probs=c(0.3,0.8))
q2 <- read.csv("./data/q2.csv", header= TRUE)
q2pt2 <- read.csv("./data/q2-1.csv", header = TRUE)
View(`q2`)
colnames(q2)[5] = "GDP"
colnames(q2)[1] = "CountryCode"
colnames(q2)[2] = "Rank"
View(`q2`)
tidyq2 <- q2[c(1,2,5)]
View(tidyq2)
tidierq2 <- tidyq2[5:219,]
View(tidierq2)
merged = merge(tidierq2,q2pt2, by.x="CountryCode", by.y="CountryCode", all=TRUE)
View(merged)
sort <- merged[order(merged$Rank),]
View(sort)
merged[,3] <- as.numeric(merged[,3])
sort <- merged[order(merged$Rank),]
View(sort)
merged = merge(tidierq2,q2pt2, by.x="CountryCode", by.y="CountryCode", all=TRUE)
View(merged)
merged[,$Rank] <- as.numeric(merged[,$Rank])
merged[,Rank] <- as.numeric(merged[,Rank])
merged[,$Rank] <- as.numeric(merged[,Rank])
merged[,merged$Rank] <- as.numeric(merged[,merged$Rank])
View(merged)
merged[,2] <- as.numeric(merged[,2])
View(merged)
merged = merge(tidierq2,q2pt2, by.x="CountryCode", by.y="CountryCode", all=TRUE)
merged[,3] <- as.numeric(merged[,3])
View(merged)
sort <- merged[order(merged$GDP),]
View(sort)
merged = merge(tidierq2,q2pt2, by.x="CountryCode", by.y="CountryCode", all=TRUE)
View(merged)
sort <- merged[order(merged$GDP),]
View(sort)
write.csv(merged, "./data/quiz3.csv")
getwd()
data <- read.csv("./data/getdata-data-ss06hid.csv", header = TRUE)
head(data)
splitnames = strsplit(names(data). "wgtp")
splitnames = strsplit(names(data), "wgtp")
splitnames [[123]]
splitnames
rm(splitnames)
rm(data)
data <- read.csv("./data/getdata-data-GDP.csv", header = TRUE)
head(data)
View(data)
View(data)
tail(data)
data2 <- gsub(",","",data)
data2
rm(data2)
head(data)
head(data)
data <- gsub(",","",data$X.3)
data
data <- read.csv("./data/getdata-data-GDP.csv", header = TRUE)
data
head(data)
head(data)
data[,X.3] <- lapply(data[,X.3],function(data){as.numeric(gsub(",", "", data))})
data2 <- data[,1:5]
head(data2)
View(data2)
data3 <- data[5:194]
data3 <- data2[5:194,]
head(data3)
rename(data3, c("X"= "CounturyCode", "Gross.domestic.product.2012" = "Rank",  "X.1" = "NA", "X.2" = "Country", "X.3"= "GDP"))
library(pkyr)
library(plyr)
rename(data3, c("X"= "CounturyCode", "Gross.domestic.product.2012" = "Rank",  "X.1" = "NA", "X.2" = "Country", "X.3"= "GDP"))
head(data3)
data4 <- rename(data3, c("X"= "CounturyCode", "Gross.domestic.product.2012" = "Rank",  "X.1" = "NA", "X.2" = "Country", "X.3"= "GDP"))
data4
head(data 4)
head(data4)
View(data4)
data5 <- [,2,3,5,6]
data5 <- [,c(2,3,5,6)]
data5 <- data4[,c(2,3,5,6)]
data5 <- data4[, c(2,3,5,6)]
data5 <- data4[, c(1,2,4,5)]
head(data5)
data5[,GDP] <- lapply(data5[,GDP],function(x){as.numeric(gsub(",", "", x))})
data5[,4] <- lapply(data5[,4],function(x){as.numeric(gsub(",", "", x))})
head(data5)
data5 <- data4[, c(1,2,4,5)]
head(data5)
data5$GDP <- gsub(",","",data5$GDP)
head(data5)
rowmeans(data5$GDP)
rowMeans(data5$GDP)
summary(data5)
str(data5)
rowMeans(data5)
mean(data$GDp)
names(data5)
data5$GDP <- as.numeric(data5$GDP)
mean(data$GDP)
summary(data5)
rowMeans(data5$GDP)
rowSums(data5)
rowSums(data5$GDP)
grep("^United",countryNames)
grep("^United",Country)
grep("^United",data5$Country)
View(data5)
grep("United$",data5$Country)
grep("*United",data5$Country)
table1 <- read.csv("getdata-data-EDSTATS_Country.csv", header= TRUE)
table1 <- read.csv("./data/getdata-data-EDSTATS_Country.csv", header= TRUE)
head(table1)
View(table1)
table2 <- table1[,c(1,10)]
head(table2)
merged <- merge(data5, table2, by.x="CountryCode", by.y="CountryCode", all=TRUE)
names(data5)[1] <- "CountryCode"
View(data5)
View(data5)
merged <- merge(data5, table2, by.x="CountryCode", by.y="CountryCode", all=TRUE)
head(merged)
View(merged)
View(merged)
merged[order(Special.Notes),]
merged[order(merged$Special.Notes),]
merged2 <-merged[order(merged$Special.Notes),]
View(merged2)
View(merged2)
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
head(amzn)
sampleTimes = index(amzn)
sampleTimes
head(amzn)
library(lubirdate)
install.packages("lubridate")
library(lubridate)
View(amzn)
amzn$year <- year(amzn$row.names)
amzn$row.names
data <- sampleTimes
data <- data.frame(sampleTimes)
View(data)
data$Year <- year(data$sampleTimes)
head(dtaa)
head(data)
data$day <- weekdays(as.Date(data$sampleTimes))
head(data)
library(plyr)
summary(data)
View(data)
View(data)
data2012 <- subset(data, year == 2012)
data2012 <- subset(data, year == "2012")
data2012 <- data[data$year == "2012",]
data2012 <- data[data$year == 2012,]
str(data)
data2012 <- subset(data, Year == "2012")
data2012Mon <- subset(data, day == "Monday")
data2012Mon <- subset(data2012, day == "Monday")
quartz()
getwd()
setwd("~/")
getwd()
library(nlme)
library(lattice)
xyplot(weight~Time | Diet, BodyWeight)
nlme
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
qplot(Wind, Ozone, data = airquality)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
ggplot(movies, aes(votes, rating))
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
setwd("~/Coursera R/ReproducibleResearch/Assignment1")
data <- read.table("activity.csv", header=TRUE, sep=",")
q1Data <- data[complete.cases(data),]
library(plyr)
byIntervalSteps <- group_by(q1Data,interval,steps)
library(dplyr)
byIntervalSteps <- group_by(q1Data,interval,steps)
cdata <- ddply(q1Data, c("interval"), summarize, sumSteps = sum(steps))
View(cdata)
summary(cdata)
max(cdata$sumSteps)
apply(cdata,1,which.max)
newdata <- cdata[order(sumSteps),]
newdata <- cdata[order(sumSteps),]
newdata <- cdata[order(cdata$sumSteps),]
View(newdata)
newdata <- cdata[order(-cdata$sumSteps),]
View(newdata)
newdata[1,]
library(ggplot2)
library(plyr)
data <- read.table("activity.csv", header=TRUE, sep=",")
q1Data <- data[complete.cases(data),]
qplot(date, data = q1Data, weight = steps) +
geom_histogram(fill="firebrick4")  +
scale_y_continuous("Steps") +
labs(x = "Date") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
labs(title = "Total Steps by Day")
ddply(q1Data,~date,summarise,mean=mean(steps),median=median(steps))
ggplot(q1Data, aes(interval,steps)) +
stat_summary(fun.y = 'mean', colour = 'firebrick4', size=1, geom = 'line') +
scale_x_continuous("Interval", limits = c(0, 2400), breaks = seq(0,2400,60))  +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
cdata <- ddply(q1Data, c("interval"), summarize, sumSteps = sum(steps))
newdata <- cdata[order(-cdata$sumSteps),]
newdata[1,]
NROW(na.omit(data))
sum(!complete.cases(data))
sum(complete.cases(data))
sum(complete.cases(data))
impute.mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
View(data)
dat2 <- ddply(data, ~ interval, transform, steps = impute.mean(steps))
View(dat2)
dat2[order(dat2$date), ]
dat2 <- dat2[order(dat2$date), ]
View(dat2)
dat2 <- dat2[order(dat2$interval), ]
View(dat2)
(qplot(date, data = q1Data, weight = steps) +
geom_histogram(fill="firebrick4")  +
scale_y_continuous("Steps") +
labs(x = "Date") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
labs(title = "Total Steps by Day")
)
(qplot(date, data = dat2, weight = steps) +
geom_histogram(fill="firebrick4")  +
scale_y_continuous("Steps") +
labs(x = "Date") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
labs(title = "Total Steps by Day"))
(qplot(date, data = q1Data, weight = steps) +
geom_histogram(fill="firebrick4")  +
scale_y_continuous("Steps") +
labs(x = "Date") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
labs(title = "Total Steps by Day"))
(qplot(date, data = dat2, weight = steps) +
geom_histogram(fill="firebrick4")  +
scale_y_continuous("Steps") +
labs(x = "Date") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
labs(title = "Total Steps by Day"))
(qplot(date, data = q1Data, weight = steps) +
geom_histogram(fill="firebrick4")  +
scale_y_continuous("Steps") +
labs(x = "Date") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
labs(title = "Total Steps by Day"))
(qplot(date, data = dat2, weight = steps) +
geom_histogram(fill="firebrick4")  +
scale_y_continuous("Steps") +
labs(x = "Date") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
labs(title = "Total Steps by Day"))
ddply(imputeData,~date,summarise,mean=mean(steps),median=median(steps))
ddply(dat2,~date,summarise,mean=mean(steps),median=median(steps))
library(ggplot2)
library(plyr)
rawData <- read.table("activity.csv", header=TRUE, sep=",")
cleanData <- data[complete.cases(data),]
cleanData <- rawData[complete.cases(rawData),]
qplot(date, data = cleanData, weight = steps) +
geom_histogram(fill="firebrick4")  +
scale_y_continuous("Steps") +
labs(x = "Date") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
labs(title = "Total Steps by Day")
ggplot(cleanData, aes(interval,steps)) +
stat_summary(fun.y = 'mean', colour = 'red', size=1, geom = 'line') +
scale_x_continuous("Interval", limits = c(0, 2400), breaks = seq(0,2400,60))  +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
sumData <- ddply(cleanData, c("interval"), summarize, sumSteps = sum(steps))
orderData <- sumData[order(-sumData$sumSteps),]
orderData[1,]
impute.mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
imputeData <- ddply(rawData, ~ interval, transform, steps = impute.mean(steps))
imputeData <- dimputeData[order(imputeData$interval), ]
imputeData <- imputeData[order(imputeData$interval), ]
qplot(date, data = imputeData, weight = steps) +
geom_histogram(fill="firebrick4")  +
scale_y_continuous("Steps") +
labs(x = "Date") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
labs(title = "Total Steps by Day")
View(imputeData)
imputeData$wday <- as.factor(ifelse(weekday(imputeData$date) %in% c("Saturday","Sunday"), "Weekend", "Weekday"))
imputeData$wday <- as.factor((weekday(imputeData$date))
)
imputeData$wday <- as.factor(weekdays(imputeData$date))
imputeData$wday <- as.factor(ifelse(weekdays(imputeData$date) %in% c("Saturday","Sunday"), "Weekend", "Weekday"))
imputeData$wday <- weekdays(imputeData$date)
test <- weekdays(imputeData$date)
weekdays(imputeData$date)
weekdays(date)
test <- weekdays(as.date(imputeData$date)
)
test <- weekdays(as.Date(imputeData$date)
)
imputeData$wday <- as.factor(ifelse(weekdays(as.Date(imputeData$date)) %in% c("Saturday","Sunday"), "Weekend", "Weekday"))
View(imputeData)
ggplot(imputeData, aes(interval,steps)) +
facet_grid(.~ wday) +
stat_summary(fun.y = 'mean', colour = 'red', size=1, geom = 'line') +
scale_x_continuous("Interval", limits = c(0, 2400), breaks = seq(0,2400,60))  +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
ggplot(imputeData, aes(interval,steps)) +
facet_grid(wday ~ .) +
stat_summary(fun.y = 'mean', colour = 'red', size=1, geom = 'line') +
scale_x_continuous("Interval", limits = c(0, 2400), breaks = seq(0,2400,60))  +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
ggplot(cleanData, aes(interval,steps)) +
stat_summary(fun.y = 'mean', colour = 'red', size=1, geom = 'line') +
scale_x_continuous("Interval", limits = c(0, 2400), breaks = seq(0,2400,200))  +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
ggplot(cleanData, aes(interval,steps)) +
stat_summary(fun.y = 'mean', colour = 'red', size=1, geom = 'line') +
scale_x_continuous("Interval", limits = c(0, 2400), breaks = seq(0,2400,100))  +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
ggplot(cleanData, aes(interval,steps)) +
stat_summary(fun.y = 'mean', colour = 'red', size=1, geom = 'line') +
scale_x_continuous("Interval", limits = c(0, 2400), breaks = seq(0,2400,200))  +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
ggplot(imputeData, aes(interval,steps)) +
facet_grid(wday ~ .) +
stat_summary(fun.y = 'mean', colour = 'red', size=1, geom = 'line') +
scale_x_continuous("Interval", limits = c(0, 2400), breaks = seq(0,2400,200))  +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
ggplot(imputeData, aes(interval,steps)) +
facet_grid(wday ~ .) +
stat_summary(fun.y = 'mean', colour = 'red', size=1, geom = 'line') +
scale_x_continuous("Interval", limits = c(0, 2400), breaks = seq(0,2400,200))  +
labs(y = "Steps") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
ggplot(cleanData, aes(interval,steps)) +
stat_summary(fun.y = 'mean', colour = 'red', size=1, geom = 'line') +
scale_x_continuous("Interval", limits = c(0, 2400), breaks = seq(0,2400,200))  +
labs(y = "Steps") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
load("~/Coursera R/ReproducibleResearch/Assignment1/RepData_PeerAssessment1/PA1_template.Rmd")
setwd("~/Coursera R/ReproducibleResearch/Assignment1")
setwd("~/Coursera R/ReproducibleResearch/Assignment1/RepData_PeerAssessment1")
getwd()
